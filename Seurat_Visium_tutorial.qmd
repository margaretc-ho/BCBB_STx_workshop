---
title: "Seurat_spatialvignette"
format:
  html:
    code-overflow: wrap
#    code-fold: true
#    code-summary: "Show code"
editor: visual
warning: false
---

## Introduction to Visium Data in R using Seurat

BCBB Workshop for NIH Researchers, Nov 2024

We will be using the packages **Seurat** and **ggplot2** for visualization. Example data comes from **SeuratData** package. Tutorial follows [Seurat official vignette](https://satijalab.org/seurat/articles/spatial_vignette) but adds additional code, demo of count data and explanations.

------------------------------------------------------------------------

### SETUP: Ideally, Run Before Class (to install packages, load libraries, and download data ahead of time)

In [red]{style="color:red"} is setup that you can run prior to the tutorial to make sure you have the R packages and data ahead of time to make sure the tutorial runs most smoothly.

Note that some commands may have a comment mark [\#]{style="color:red"} that you will need to remove in order to run them.

[Install the packages:]{style="color:red"}

[**remotes** and **devtools** are useful tools for installing packages]{style="color:red"}

[**Seurat** (required) and **Seurat Data** (only necessary for the tutorial)]{style="color:red"}

[You will also need **ggplot** for plotting and **dplyr**, **tidyr** for data analysis]{style="color:red"}

```{r install}
#install.packages('remotes')
##remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
##remotes::install_github("satijalab/seurat-data", "seurat5", quiet = TRUE)
##remotes::install_github("satijalab/azimuth", "seurat5", quiet = TRUE)
##remotes::install_github("satijalab/seurat-wrappers", "seurat5", quiet = TRUE)
##remotes::install_github("stuart-lab/signac", "seurat5", quiet = TRUE)
##remotes::install_github("bnprks/BPCells", quiet = TRUE)
#install.packages('Seurat')
#install.packages('devtools')
#devtools::install_github('satijalab/seurat-data')

#install.packages("ggplot2")
#install.packages("patchwork")
#install.packages("dplyr")
#install.packages("tidyr")
```

[We will need the following libraries:]{style="color:red"}

```{r loadlibraries}
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(tidyr)
```

[**Download the mouse brain Visium dataset ahead of time**]{style="color:red"}

```{r}
#InstallData("stxBrain")
```

[Later, for running RCTD, you will also need the spacexr R package and a mouse cortex reference]{style="color:red"}. Note that I had issues downloading until I took myself off NIH VPN (try that if it doesn't work for you on VPN).

```{r}
#if (!requireNamespace("spacexr", quietly = TRUE)) {
#  devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
#}
#### OR 
#remotes::install_github("dmcable/RCTD")
library(spacexr)
```

[**Download mouse cortex reference [here](https://www.dropbox.com/scl/fi/r1mixf4eof2cot891n215/allen_scRNAseq_ref.Rds?rlkey=ynr6s6wu1efqsjsu3h40vitt7&dl=0).** This reference scRNAseq dataset has been reduced to 200,000 cells (and rare cell types fewer than 25 cells have been removed).]{style="color:red"}

[We will be running a bunch of calculations which will be sped up with the **glmGampoi** and **Rfast2** packages, so let's install and load them as well:]{style="color:red"}

```{r}
#BiocManager::install('glmGamPoi')
### fits Gamma-Poisson (aka Negative Binomial) Generalized Linear Models 
### substantially improves speed for the SCTransform algorithm
library(glmGamPoi)
#install.packages("Rfast2")
### substantially improves speed for  FindSpatialVariableFeatures
library(Rfast2)
```

Now you should now be ready to run the rest of the tutorial fairly quickly!

------------------------------------------------------------------------

### Useful Resources for Seurat

Useful resources for understanding the Seurat object class and methods:

Seurat wiki: <https://github.com/satijalab/seurat/wiki>

Essential Seurat commands: <https://satijalab.org/seurat/articles/essential_commands.html>

Every Seurat object consists as a collection of Assay objects and DimReduc objects.

Each Seurat object has slots:

| Slot           | Function                                                                        |
|----------------|--------------------------------------------------------|
| `assays`       | A list of assays within this object                                             |
| `meta.data`    | Cell-level meta data                                                            |
| `active.assay` | Name of active, or default, assay                                               |
| `active.ident` | Identity classes for the current object                                         |
| `graphs`       | A list of nearest neighbor graphs                                               |
| `reductions`   | A list of DimReduc objects                                                      |
| `project.name` | User-defined project name (optional)                                            |
| `tools`        | Empty list. Tool developers can store any internal data from their methods here |
| `misc`         | Empty slot. User can store additional information here                          |
| `version`      | Seurat version used when creating the object                                    |

You can also check the list of methods available for Seurat objects like so:

```{r}
utils::methods(class = 'Seurat')
```

------------------------------------------------------------------------

### Load Visium Data

Let's load some stxBrain Visium data from the SeuratData package

This data consists of a single anterior slice named `anterior1`

```{r}
?stxBrain
#InstallData("stxBrain")
brain <- LoadData("stxBrain", type = "anterior1")
brain@assays
#Cells(brain)
#Features(brain)
#brain$nCount_Spatial ### numbers of UMIs per spot
#brain$nFeature_Spatial ### number of features detected per spot
```

We are using a convenient package here that includes pre-loaded data, but for a typical Visium experiment we would use the following command

```         
Load10x_Spatial(dir=“/data/dir/”, filename = "filtered_feature_bc_matrix.h5", assay = "Spatial", slice = "slice1")
```

For additional help to load custom 10X Visium data into a Seurat object, see <https://satijalab.org/seurat/reference/load10x_spatial>

This 10X Visium data consists of:

-   A spot by gene expression matrix

-   An image of the tissue slice (obtained from H&E staining during data acquisition)

-   Scaling factors that relate the original high resolution image to the lower resolution image used here for visualization.

In this Seurat object containing 10X Visium STx data the spot by gene expression matrix contains spot level, not single-cell level data. The "images" slot of the Seurat object contains the image of the tissue as well spatial information needed to associate spot with spatial coordinates in the tissue image.

```{r}
nrow(brain) # the number of features / genes
ncol(brain) # the number of samples / cells / spots
```

**glimpse()** is as a handy way to quickly look at an object in R (gives the hierarchy/data structure):

```{r}
glimpse(brain)
```

------------------------------------------------------------------------

### Seurat object metadata

Metadata is stored as a `data.frame`, where each row is a sample (e.g. cell or spot) and each column correspond to one sample-level metadata field.

Accessed via `[[` extract operator, the `meta.data` object, or the `$` sigil (`$` extracts one single column at a time). Row names in the metadata need to match the column names of the counts matrix.

```{r}
#head(brain@meta.data)
#rownames(brain@meta.data)
```

Here we can look at the distribution of transcripts detected per spot and spatially across the sample image:

```{r}
brainCount_Spatial_VlnPlot <- VlnPlot(brain, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
brain_SpatialFeaturePlot <- SpatialFeaturePlot(brain, features = "nCount_Spatial", images="anterior1") + theme(legend.position = "right")
wrap_plots(brainCount_Spatial_VlnPlot, brain_SpatialFeaturePlot)
### ggsave("brain_SpatialFeaturePlot.png", brain_SpatialFeaturePlot, dpi=800)
### to save the plot
```

### Mouse Brain Anatomy

![](images/clipboard-1678933114.png)

(source: <https://www.biorender.com/template/mouse-brain-anatomy-sagittal-view>)

### Exploring what we mean by Overdispersion of Count Data

```{r}
# Save the raw count data
nCount_Spatial <- brain@meta.data$nCount_Spatial
# Create a data frame for plotting
nCount_Spatialdf <- data.frame(nCount_Spatial = nCount_Spatial)

# Plot histogram to visualize overdispersion
ggplot(nCount_Spatialdf, aes(x = nCount_Spatial)) +
  geom_histogram(binwidth = 100, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of nCount_Spatial",
       x = "nCount_Spatial",
       y = "Frequency") +
  theme_minimal()
```

#### Compare to Poisson Distribution of the same mean

```{r}
#install.packages("MASS")
library(MASS)
#class(nCount_Spatial)
lambda <- mean(nCount_Spatialdf$nCount_Spatial)
nCount_Spatial_rPoisson<-rpois(n = length(nCount_Spatialdf$nCount_Spatial), lambda)

nCount_df <- data.frame(nCount_Spatial1 = nCount_Spatial, nCount_SpatialPoisson = nCount_Spatial_rPoisson)

ggplot() +
  geom_histogram(data = nCount_df, aes(x = nCount_Spatial, fill = "nCount_Spatial"), binwidth = 200, alpha = 0.5, position = 'identity') +
  geom_histogram(data = nCount_df, aes(x = nCount_SpatialPoisson, fill = "nCount_SpatialPoisson"), binwidth = 200, alpha = 0.5, position = 'identity') +
  scale_fill_manual(name = "Legend", values = c("nCount_Spatial" = "blue", "nCount_SpatialPoisson" = "red")) +
  labs(title = "Overlayed Histogram of nCount_Spatial and nCount_SpatialPoisson", x = "Value", y = "Count") + theme_minimal()
```

The Poisson distribution (equivalent to normal distribution at high n) is really not appropriate for modeling count data! The observed count data has much higher variance.

### Compare to Negative Binomial Distribution with same mean and dispersion

```{r}
mu_count <- mean(nCount_Spatialdf$nCount_Spatial)
variance_count <- var(nCount_Spatialdf$nCount_Spatial)

if (variance_count > mu_count) {
  # Estimate the dispersion parameter (size)
  size_count <- mu_count^2 / (variance_count - mu_count)
  print(paste("Estimated dispersion parameter (size):", size_count))
} else {
  stop("Variance must be greater than the mean to estimate size.")
}
```

```{r}
nCount_Spatial_rNB<-rnbinom(n = length(nCount_Spatialdf$nCount_Spatial), size=size_count, mu=mu_count)

nCount_df <- data.frame(nCount_Spatial1 = nCount_Spatial, nCount_SpatialPoisson = nCount_Spatial_rPoisson, nCountSpatialNB=nCount_Spatial_rNB)

ggplot() +
  geom_histogram(data = nCount_df, aes(x = nCount_Spatial, fill = "nCount_Spatial"), binwidth = 1000, alpha = 0.5, position = 'identity') +
  geom_histogram(data = nCount_df, aes(x = nCountSpatialNB, fill = "nCountSpatialNB"), binwidth = 1000, alpha = 0.5, position = 'identity') +
  scale_fill_manual(name = "Legend", values = c("nCount_Spatial" = "blue", "nCountSpatialNB" = "red")) +
  labs(title = "Overlayed Histogram of nCount_Spatial and nCountSpatialNB", x = "Value", y = "Count") + theme_minimal()
```

Checking the variance of our count data vs. the fitted NB model

```{r}
sd(nCount_df$nCount_Spatial1)
sd(nCount_df$nCountSpatialNB)
```

The fitted NB only slightly underestimates the variance (sd=var\^2) in the count data! Our count data has a lot of variance, which is why we will perform a normalization with SCTransform (regularized negative binomial regression method) to try to remove some of the excess variance.

------------------------------------------------------------------------

### Visualize mitochondrial contamination and filter it out

```{r}
brain[["percent.mt"]] <-PercentageFeatureSet(object = brain, pattern = "^MT-|^mt-")
summary(brain[["percent.mt"]])
VlnPlot(brain, features = "percent.mt", pt.size = 0.1) + NoLegend()
```

On a histogram, we can see this more clearly:

```{r}
### as straight histogram
#brain@meta.data %>% ggplot(mapping=aes(x=percent.mt)) + 
#  geom_histogram(bins=50) + 
#  theme_minimal()

### histogram with density plot
brain@meta.data %>% ggplot(mapping=aes(x=percent.mt)) + 
  geom_histogram(bins=50, aes(y = after_stat(density)), colour = "black",fill = "grey") + 
  geom_density(alpha = 0.5, adjust = 1.0, fill = "#A0CBE8", colour = "#4E79A7") + 
  theme_minimal()
```

Here's our Count Data after filtering out Mitochondrial Genes using Seurat's **subset()** function

```{r remove_pctmito_gt25}
?subset.Seurat
brain_mtfilt<-subset(x = brain, subset = percent.mt < 28)
#VlnPlot(brain_mtfilt, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
#SpatialFeaturePlot(brain_mtfilt, features = "nCount_Spatial") + theme(legend.position = "right")

```

------------------------------------------------------------------------

### Normalize Count Data with scTransform

Here, we are plotting the library size (molecular counts) across the data and the tissue. We can see there are tissue regions where counts are reduced, coinciding with areas of white matter where neurons are scarce. Where one might normally use LogNormalize() function in Seurat to force each data point to have a standard/median size after normalization, this can introduce problems.

```{r}
SpatialFeaturePlot(brain_mtfilt, features = "nCount_Spatial") + theme(legend.position = "right")
```

We will use **scTransform**, which uses regularized NB model for gene expression to account for technical variation while preserving biological variation. ScTransform functions by normalizing data and detecting high variance features and stores this data in the SCT assay of the Seurat object.

We can use it with this data, specifying "Spatial" as the assay to perform the transformation on:

```{r}
#BiocManager::install('glmGamPoi')
### fits Gamma-Poisson (aka Negative Binomial) Generalized Linear Models 
### substantially improves speed for the SCTransform algorithm
library(glmGamPoi)
brain_mtfilt <- SCTransform(brain_mtfilt, assay = "Spatial", verbose = TRUE)
### alternatively, know that you can also tell SCTransform to regress out certain features like percent.mt instead of using filtering them out using subset 
###brain <- SCTransform(brain, assay = "Spatial", vars.to.regress = "percent.mt", verbose = TRUE)
```

Now we can see the Active Assay should be SCT:

```{r}
#brain_mtfilt@assays$SCT$counts
brain_mtfilt
```

------------------------------------------------------------------------

### Spatial Feature Plot can be used to show the spatial expression pattern of a given feature/gene

The [`SpatialFeaturePlot`](https://satijalab.org/seurat/reference/spatialplot) function in Seurat extends `FeaturePlot`, and can overlay molecular data on top of tissue histology.

Hpca = hippocalcin (neuron-specific Ca2+ binding protein)

Ttr = transthyretin (retinol transporter)

```{r}
SpatialFeaturePlot(brain_mtfilt, features = c("Hpca", "Ttr"))
```

Seurat's default parameters emphasize the molecular visualization of the data, but we can adjust the plotting parameters to allow for better visualization of histology. The following parameters can be adjusted:

-   `pt.size.factor`- This will scale the size of the spots. Default is 1.6

-   `alpha` - minimum and maximum transparency. Default is c(1, 1).

    -   try setting to `alpha` c(0.1, 1), to downweight the transparency of points with lower expression

```{r}
p1 <- SpatialFeaturePlot(brain_mtfilt, features = "Ttr", pt.size.factor = 2)
p2 <- SpatialFeaturePlot(brain_mtfilt, features = "Ttr", alpha = c(0.1, 1))
p1 + p2
```

ImageFeaturePlot shows another view of gene expression on a spatial map:

Gfap = astroglial marker (strong in pial layer and hippocampus and esp white matter astrocytes)

```{r}
ImageFeaturePlot(brain_mtfilt, features="Ttr", size=2)
ImageFeaturePlot(brain_mtfilt, features="Gfap", size=2)

```

------------------------------------------------------------------------

### Dimension Reduction with PCA, Clustering and Visualize Clusters with UMAP

We can then perform dimension reduction with PCA, run k-NN clustering and further visualize with UMAP

```{r}
brain_mtfilt <- RunPCA(brain_mtfilt, assay = "SCT", verbose = TRUE)
brain_mtfilt <- FindNeighbors(brain_mtfilt, reduction = "pca", dims = 1:30)
brain_mtfilt <- FindClusters(brain_mtfilt, verbose = FALSE)
brain_mtfilt <- RunUMAP(brain_mtfilt, reduction = "pca", dims = 1:30)
Reductions(brain_mtfilt)
```

The PCA analysis resulted in 50 principal components and 14 clusters

```{r}
brain_mtfilt@reductions$pca
```

```{r}
summary(brain_mtfilt$seurat_clusters)
```

We can plot the PCA graph along PC1 and PC2 and also show the location of the identified clusters. Note: The use of "label" labels each cluster.

```{r plotPCA}
p1 <- DimPlot(brain_mtfilt, reduction = "pca", label = TRUE)
p2 <- SpatialDimPlot(brain_mtfilt, label = TRUE, label.size = 3, pt.size.factor = 2.5)
p1 + p2
```

Then we can visualize clusters via UMAP embedding to show the relative distance between clusters on a 2-dimensional embedding

```{r}
p1 <- DimPlot(brain_mtfilt, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(brain_mtfilt, label = TRUE, label.size = 3, pt.size.factor = 2)
p1 + p2
```

------------------------------------------------------------------------

### Save Point 1

It's always useful to save your Seurat objects as RDS objects for loading again later

```{r}
saveRDS(brain_mtfilt, file = "brain_mtfilt_sctransform.rds")
#brain_mtfilt <- readRDS("brain_mtfilt_sctransform.rds")
```

------------------------------------------------------------------------

### Use SpatialDimPlot and ImageDimPlot to examine clusters

**SpatialDimPlot** will show the cluster labels and you can also use ggplot to easily add the X-Y coordinates to the image. You could use **Crop()** to manually crop the coordinates (we won't here).

```{r}
SpatialDimPlot(brain_mtfilt, label = TRUE, label.size = 3, pt.size.factor = 2) +   theme_minimal() + 
  theme(panel.grid.major = element_line(color = "grey80", linewidth = 0.5), # Major grid lines
panel.grid.minor = element_line(color = "grey90", linewidth = 0.25)) # Minor grid lines
```

**ImageDimPlot** can also be similarly used, but on a spatial map (not overlaid over the image):

```{r}
ImageDimPlot (brain_mtfilt, size=2)

### note some issues with axes in ImageDimPlot https://github.com/satijalab/seurat/issues/6132
```

SpatialDimPlot and SpatialFeaturePlot both have an interactive option

```{r}
#SpatialDimPlot(brain_mtfilt, label = TRUE, label.size = 3, pt.size.factor = 3, interactive=TRUE)

#SpatialFeaturePlot(brain_mtfilt, features = "Ttr", alpha = c(0.1, 1), interactive=TRUE)
```

Another useful interactive feature, *LinkedDimPlot* links the UMAP representation to the tissue image representation! If you select a cluster in the UMAP plot the corresponding spots in the image will be highlighted.

```{r}
#LinkedDimPlot(brain_mtfilt)
```

The function *cells.highlight* within SpatialDimPlot can be used to mark a particular cell of interest. This will plot each cluster's spatial distribution one by one. Here we have clusters 1,2, 3, 4, 5 and 8

```{r}
SpatialDimPlot(brain_mtfilt, cells.highlight = CellsByIdentities(object = brain_mtfilt, idents = c(1, 2, 3, 4, 5, 8)), facet.highlight = TRUE, ncol = 3, pt.size.factor = 2)
```

Here are the SCTransformed Counts (UMI) for each Cluster on a Violin Plot

```{r}
VlnPlot(brain_mtfilt, features = "nCount_SCT", pt.size = 0.1) + NoLegend()
#RidgePlot(brain_mtfilt, features = "nCount_SCT") ### or a ridge plot
```

------------------------------------------------------------------------

## Find DE Marker Genes for Clusters

We can identify differentially expressed genes between two groups of cells using a Wilcoxon Rank Sum test with the *FindMarkers* function. Because the clusters that were found have good spatial restriction, this is one way of finding genes marking spatially distinct regions.

Here we look at DE genes between cluster 2 and cluster 5.

(Note if you set ident.2 = NULL you will get DE genes between cluster 2 and all other cells)

```{r}
#devtools::install_github('immunogenomics/presto')
### presto will allow a much faster implementation of the Wilcoxon Rank Sum Test
library(presto)
de_markers_2_5 <- FindMarkers(brain_mtfilt, ident.1 = 2, ident.2 = 5)
SpatialFeaturePlot(object = brain_mtfilt, features = rownames(de_markers_2_5)[1:3], alpha = c(0.1, 1), ncol = 3, pt.size.factor = 2.5)
```

According to Seurat documentation, FindMarkers has the following output:

-   p_val : p-value (unadjusted)

-   avg_log2FC : log fold-change of the average expression between the two groups. Positive values indicate that the feature is more highly expressed in the first group.

-   pct.1 : The percentage of cells where the feature is detected in the first group

-   pct.2 : The percentage of cells where the feature is detected in the second group

-   p_val_adj : Adjusted p-value, based on Bonferroni correction using all features in the dataset.

```{r}
head(de_markers_2_5)
```

We can plot the spatial expression patterns of the top 6 DE genes between cluster 2 and cluster 5:

```{r}
de_markers_2_5_p0.01 <- de_markers_2_5 %>% filter(p_val < 0.01)
SpatialFeaturePlot(object = brain_mtfilt, features = rownames(de_markers_2_5_p0.01)[1:6], alpha = c(0.1, 1), ncol = 3, pt.size.factor = 2.5)
```

------------------------------------------------------------------------

### Spatially Variable Genes/Features using Moran's I

A more direct way to find spatially variable genes is using `FindSpatiallyVariableFeatures()` . It identifies genes/features exhibiting spatial patterning in the absence of pre-annotation. The default method (method=`markvariogram`) is inspired by the Trendsceek package, which takes STx data as a mark point process and computes a variogram to ID genes based on expression in spatial location. But we can also specify it to use Moran's I.

We will run **FindSpatiallyVariableFeatures** with the most 1000 variable features and Moran's I method

```{r}
#install.packages("Rfast2")
library(Rfast2)
brain_mtfilt <- FindSpatiallyVariableFeatures(brain_mtfilt, assay = "SCT", features = VariableFeatures(brain_mtfilt)[1:1000], selection.method = "moransi")
```

```{r}
#brain_mtfilt$SCT
#brain_mtfilt$SCT@meta.features
```

```{r}
moransi_output_df <- brain_mtfilt@assays$SCT@meta.features %>%
  na.exclude
head(moransi_output_df[order(moransi_output_df$MoransI_observed, decreasing = T), ])
```

Again, we can use SpatialFeaturePlot to look at the expression of the top 6 most spatially variable genes:

```{r}
top.clusters <- rownames(brain_mtfilt$SCT@meta.features)[which(brain_mtfilt$SCT@meta.features$moransi.spatially.variable.rank < 6)]
SpatialFeaturePlot(brain_mtfilt, features = top.clusters, ncol = 3, alpha = c(0.1, 1), pt.size.factor = 2.5)
```

------------------------------------------------------------------------

## Analysis of Mouse Cortex using scRNA-seq reference

With the Allen Brain Atlas, we have reference scRNA-seq data for many brain regions with detailed annotations of cell type based on gene expression. We will make use of their mouse cortex reference (download [here](https://www.dropbox.com/scl/fi/r1mixf4eof2cot891n215/allen_scRNAseq_ref.Rds?rlkey=ynr6s6wu1efqsjsu3h40vitt7&dl=0), skip if done ahead of time). This cortex reference scRNAseq dataset has been reduced to 200,000 cells (and rare cell types fewer than 25 cells have been removed).

We can select the anatomic regions of the mouse cortex of our Seurat `brain_mtfilt` object by selecting specific clusters that correspond to this anatomical region using Seurat's subset function again.

```{r subset_cortex}
cortex <- subset(brain_mtfilt, idents = c(1, 2, 3, 4, 6))
SpatialDimPlot(cortex, crop = TRUE, label = TRUE)
```

After subsetting, we should renormalize the cortex spatial data and rerun PCA, clustering and UMAP:

```{r}
cortex <- SCTransform(cortex, assay = "Spatial", verbose = FALSE) %>%
    RunPCA(verbose = FALSE) %>% 
    FindNeighbors(reduction = "pca", dims = 1:30) %>% 
    FindClusters(verbose = FALSE) %>% 
    RunUMAP(reduction = "pca", dims = 1:30)
Reductions(cortex)
```

This yields clusters that are even more defined:

```{r}
p1 <- DimPlot(cortex, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(cortex, label = TRUE, label.size = 3, pt.size.factor = 2.5)
p1 + p2
```

------------------------------------------------------------------------

### Annotation using with a scRNA-seq reference

We will use an algorithm called Robust Cell Type Decomposition to annotate cell types in the query STx dataset using labels from a reference scRNA-seq dataset

First, install RCTD and load it using **library(spacexr)** (skip if done ahead of time)

```{r}
#if (!requireNamespace("spacexr", quietly = TRUE)) {
#  devtools::install_github("dmcable/spacexr", build_vignettes = FALSE)
#}

### Note: I had issues installing until I took myself off NIH VPN. Might want to do the same if you encounter the same issue

#remotes::install_github("dmcable/RCTD")
```

Load the mouse cortex reference as `ref` object:

```{r}
library(spacexr)
#setwd("/Users/homc/Library/CloudStorage/OneDrive-NationalInstitutesofHealth/MHO_WORK/MyWorkshops/SpatialTranscriptomics/Seurat_tutorial/")
ref <- readRDS("allen_cortex.rds")
ref <- UpdateSeuratObject(ref)
#ref@assays$RNA
```

```{r}
ref_counts <- ref[["RNA"]]$counts ### sparse matrix of count data 
ref_cluster <- as.factor(ref$subclass) ## annotate cell_types
ref_nUMI <- ref$nCount_RNA ### list of total counts or UMIs
levels(ref_cluster) <- gsub("/", "-", levels(ref_cluster)) ## format cell_type names
```

Sketch the cortical subset of the Visium dataset, which downsamples the high-dimensional spatial RNA expression data, which can help with scalability for large datasets, to 10,000 cells

```{r}
DefaultAssay(cortex) <- "Spatial"
cortex <- FindVariableFeatures(cortex)
cortex <- NormalizeData(cortex)
cortex <- ScaleData(cortex)
cortex <- SketchData(
  object = cortex,
  ncells = 10000,
  method = "LeverageScore",
  sketched.assay = "sketch"
)
```

```{r}
DefaultAssay(cortex) <- "sketch" ### set the default assay now to "sketch"
cortex <- FindVariableFeatures(cortex, assay="sketch")
cortex <- ScaleData(cortex, assay="sketch")
cortex <- RunPCA(cortex, assay = "sketch", reduction.name = "pca.cortex.sketch", verbose = T)
cortex <- FindNeighbors(cortex, reduction = "pca.cortex.sketch", dims = 1:50)
cortex <- RunUMAP(cortex, reduction = "pca.cortex.sketch", reduction.name = "umap.cortex.sketch", return.model = T, dims = 1:50, verbose = T)
```

Create RCTD reference object

```{r}
### make reference object from the ref scRNA-seq counts, annotated cell types, and nUMI calculated above
reference <- Reference(ref_counts, ref_cluster, ref_nUMI) 
```

Create the RCTD query object

```{r}
### calculate the query counts and spot barcodes, use to get spot coordinates
query_counts_hd <- cortex[["sketch"]]$counts ### sparse matrix of counts
query_cells_hd <- colnames(cortex[["sketch"]]) ### spots names/barcodes
query_coords <- GetTissueCoordinates(cortex)[query_cells_hd, 1:2] ### coordinates of the spots

### make query SpatialRNA object from the cortex Visium data from coords, counts, and nUMI calculated above
query <- SpatialRNA(query_coords, query_counts_hd, colSums(query_counts_hd)) 
```

```{r}
# run RCTD on query and reference objects
RCTD <- create.RCTD(query, reference, max_cores = 28, CELL_MIN_INSTANCE=5)
RCTD <- run.RCTD(RCTD, doublet_mode = "doublet")
# add results back to cortex object metadata
cortex <- AddMetaData(cortex, metadata = RCTD@results$results_df)
```

```{r}
glimpse(cortex)
#summary(cortex@meta.data$first_type)
```

Project RCTD labels from sketched cortical cells to all cortical cells

```{r}

### change first_type NAs to Unknown
cortex$first_type <- as.character(cortex$first_type) ### label a new column 
cortex$first_type[is.na(cortex$first_type)] <- "Unknown"

### project RCTD labels from sketched cells to all cortical cells
cortex <- ProjectData(
  object = cortex,
  assay = "Spatial",
  full.reduction = "pca",
  sketched.assay = "sketch",
  sketched.reduction = "pca.cortex.sketch",
  umap.model = "umap.cortex.sketch",
  dims = 1:50,
  refdata = list(full_first_type = "first_type") 
  ### assigns the first_type from sketch to full_first_type in the full dataset
)
```

```{r}
## make the default assay for brain_mtfilt as Spatial
DefaultAssay(brain_mtfilt) <- "Spatial"
# we only ran RCTD on the cortical cells
# set labels to all other cells as "Unknown"
brain_mtfilt[[]][, "full_first_type"] <- "Unknown" ## assign any NAs/empty labels as Unknown
brain_mtfilt$full_first_type[Cells(cortex)] <- cortex$full_first_type[Cells(cortex)]
Idents(brain_mtfilt) <- "full_first_type" 
```

### Save Point 2

```{r}
saveRDS(brain_mtfilt, file = "brain_mtfilt_sctransform_cortexannot.rds")
#brain_mtfilt <- readRDS("brain_mtfilt_sctransform_cortexannot.rds")
```

#### Visualize excitatory interneuron layers

```{r}
###  We can isolate the excitatory layer interneurons in the cortex because they have cell type names starting with L
cells <- CellsByIdentities(brain_mtfilt)
excitatory_names <- sort(grep("^L.*", names(cells), value = TRUE))
### Then we can plot the spatial locations of these excitatory interneuron types
SpatialDimPlot(brain_mtfilt, cells.highlight = cells[excitatory_names], cols.highlight = c("#FFFF00", "grey50"), facet.highlight = T, combine = T, ncol = 4)
```

```{r}
### Here are all the labeled cells
#all_cell_names<- names(cells)
#SpatialDimPlot(brain_mtfilt, cells.highlight = cells[all_cell_names], cols.highlight = c("#FFFF00", "grey50"), facet.highlight = T, combine = F, ncol = 1)
```

```{r}
library(viridis)
brain_mtfilt_types <- as.data.frame(table(brain_mtfilt$full_first_type))
colnames(brain_mtfilt_types) <- c("Cell_Type", "Freq")

ggplot(brain_mtfilt_types, aes(x = Cell_Type, y = Freq, fill=Cell_Type)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Assigned Cell Type after RTCD", x = "Assigned Cell Type after RTCD", y = "Count") +
  scale_fill_viridis(discrete=T, option="C")
```

**ImageDimPlot** will allow us to see the annotated cell identities on a spatial map:

```{r}
ImageDimPlot(brain_mtfilt, size=2, dark.background=FALSE, cols="polychrome") +   theme_minimal() + theme(panel.grid.major = element_line(color = "grey80", linewidth = 0.5), # Major grid lines
panel.grid.minor = element_line(color = "grey90", linewidth = 0.25)) + # Minor grid lines + 
scale_x_continuous(name = "X Coordinate") + # X-axis label
scale_y_continuous(name = "Y Coordinate") # Y-axis label
```

```{r}


```
